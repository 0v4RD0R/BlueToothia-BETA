import time
import os
import threading
import bluetooth
from bluetooth import *

class HijackingTool:
    def __init__(self):
        self.nearby_devices = []
        self.running = False
        self.target_address = None
        self.target_name = None

    def start(self):
        self.running = True
        self.start_hijacking()

    def stop(self):
        self.running = False

    def discover_devices(self):
        try:
            print("Searching for nearby devices...")
            nearby_devices = bluetooth.discover_devices(lookup_names=True, duration=8, device_id=-1)

            if nearby_devices:
                print("Found %d devices." % len(nearby_devices))
                for addr, name in nearby_devices:
                    print(" %s - %s" % (addr, name))
                self.nearby_devices = nearby_devices
            else:
                print("No nearby devices found.")
        except bluetooth.BluetoothError as e:
            print(f"Failed to discover devices: {e}")

    def hijack_devices(self):
        for addr, name in self.nearby_devices:
            self.hijack_device(addr, name)

    def hijack_device(self, addr, name):
        try:
            print("Trying to connect to %s - %s..." % (addr, name))
            sock = bluetooth.BluetoothSocket(bluetooth.RFCOMM)
            sock.connect((addr, 1))
            print("Connected to %s - %s!" % (addr, name))
            sock.close()
        except Exception as e:
            print(f"Failed to connect to {addr} - {name}: {e}")

    def start_hijacking(self):
        print("Starting hijacking process...")
        while self.running:
            self.discover_devices()
            self.hijack_devices()
            time.sleep(5)

    def connect_to_target(self):
        print("Connecting to target device %s - %s..." % (self.target_address, self.target_name))
        try:
            sock = bluetooth.BluetoothSocket(bluetooth.RFCOMM)
            sock.connect((self.target_address, 1))
            print("Connected to target device %s - %s!" % (self.target_address, self.target_name))
            sock.close()
        except Exception as e:
            print(f"Failed to connect to target device {self.target_address} - {self.target_name}: {e}")

    def disconnect_from_target(self):
        print("Disconnected from target device.")

# Example of usage
if __name__ == "__main__":
    hijacking_tool = HijackingTool()
    hijacking_tool.target_address = "00:11:22:33:44:55"  # Replace with the actual target address
    hijacking_tool.target_name = "TargetDevice"  # Replace with the actual target name

    hijacking_tool.start()
    time.sleep(15)  # Run for 15 seconds
    hijacking_tool.stop()
